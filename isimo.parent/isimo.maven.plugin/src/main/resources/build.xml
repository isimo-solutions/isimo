<project name="isimoantfile">
	<!-- To use one of the tasks in the project, this line needs to be added in build-->
	<property file="local.properties"/>
	<property file="config/default.properties"/>
	<property name="mvn.test.classpath" refid="maven.test.classpath" />
	<property name="mvn.runtime.classpath" refid="maven.runtime.classpath" />
		<path id="project.classpath">		
		<pathelement path="${mvn.test.classpath}"/>
	</path>
	<path id="runtime.classpath">		
		<pathelement path="${mvn.runtime.classpath}"/>
	</path>
	<!-- Properties can be imported from system environment!(Here test.properties) -->
	<property environment="ENVIRONMENT"/>
	<property name="parallel" value="false"/>


	<!-- classpath for required jar files; the classpath is set to the list of jar files and classes in the project. -->
	<path id="project.classpath">
		<pathelement path="${mvn.test.classpath}"/>
	</path>

	<!-- To use one of the tasks in the project, this line needs to be added in build-->
	<taskdef classpathref="project.classpath" resource="net/sf/antcontrib/antlib.xml" />
	<taskdef classpathref="project.classpath" name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
	<taskdef classpathref="project.classpath" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" name="junit"/>

	
	<target name="preparation">
		<echo>phase:postprocess</echo>
		<path id="p.classpath">
			<pathelement path="mvn.test.classpath" />
		</path>
		<isimodependencyfilesets prefix="mavendeps."/>
		<taskdef classpathref="p.classpath" resource="net/sf/antcontrib/antlib.xml" />
		<echo>mvn.test.classpath=${mvn.test.classpath}</echo>
		<for param="dep" list="${mavendeps.isimo.project.dependencies.property}" delimiter=",">
			<sequential>
			    <echo>dep=@{dep}</echo>
				<unzip dest="${project.build.directory}" src="@{dep}" overwrite="true">
					<patternset>
						<include name="isimoresources/**"/>
					</patternset>
				</unzip>
				<if>
					<not><isset property="isimo.buildsequence"/></not>
					<then>
						<mkdir dir="${project.build.directory}/tempbuilds"/>
						<echo file="${project.build.directory}/tempbuilds/buildsequence.properties">isimo.buildsequence=</echo>
						<unzip dest="${project.build.directory}/tempbuilds" src="@{dep}" overwrite="true">
							<patternset>
								<include name="isimoresources/**/isimobuild.xml"/>
							</patternset>
						</unzip>
						<for param="buildxml">
							<fileset dir="${project.build.directory}/tempbuilds"/>
							<sequential>
								<echo file="${project.build.directory}/tempbuilds/buildsequence.properties" append="true">@{buildxml}</echo>
							</sequential>
						</for>
						<property file="${project.build.directory}/tempbuilds/buildsequence.properties"/>
					</then>
				</if>
			</sequential>
		</for>
	</target>
	
	<target name="test">
		<property name="scenario" value="${testscenario}"/>
		<property name="com.isimo.scenarios" value="${project.build.directory}/test-classes"/>
		<echo>mvn.test.classpath=${mvn.test.classpath}</echo>
		<echo>scenario=${scenario}</echo>
		<runtarget target="testScenario"/>
	</target>

	<target name="moduletest" >
		<echo>phase:modultest</echo>
		<property name="com.isimo.scenarios" value="${project.build.directory}/test-classes"/>
		<fileset id="isimo.scenarios" dir="${com.isimo.scenarios}">
			<include name="${module}/**/*.xml"/>
		</fileset>
		<property name="configdir" value="${basedir}/config"/>
		<echo>mvn.test.classpath=${mvn.test.classpath}</echo>
		<echo>project.build.directory=${project.build.directory}</echo>
		<runtarget target="testManyScenarios"/>
	</target>
	
	
	

	<target name="skiptests">
		<echo>Skipping Tests</echo>
	</target>
	
	
	
	

	<macrodef name="genproperties">
		<attribute name="input"/>
		<attribute name="result"/>
		<attribute name="mavenprops"/>
		<sequential>
			<echo>Dumping properties to file @{input}</echo>
			<echoproperties destfile="@{mavenprops}"/>
			<echoproperties destfile="@{input}"/>
			<echo>user.dir=${user}</echo>
			<if>
				<not>
					<isset property="isimo.waitforremotedebug.genprops"/>
				</not>
				<then>
					<property name="isimo.waitforremotedebug.genprops" value="n"/>
				</then>
			</if>
			<java classname="com.isimo.core.properties.PropertiesGenerator" classpathref="project.classpath" fork="true" dir="${project.build.directory}/tests">
				<jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=${isimo.waitforremotedebug.genprops},address=25005"/>
				<jvmarg value="-Dfile.encoding=UTF-8"/>
				<jvmarg value="-Dtestdir=${project.build.directory}/tests"/>
				<jvmarg value="-Dproject.build.directory=${project.build.directory}"/>
				<jvmarg value="-Disimo.browser=${isimo.browser}"/>
				<arg value="@{input}"/>
				<arg value="@{result}"/>
			</java>
			<echo>Properties dumped</echo>
		</sequential>
	</macrodef>

	<target name="init">
		<property name="testdir" value="${project.build.directory}/tests"/>
		<mkdir dir="${testdir}"/>
	</target>


	<target name="testScenario" depends="init">
		<!-- Report the current properties to the log -->
		<echo>mvn.test.classpath=${mvn.test.classpath}</echo>
		<echo>scenario=${scenario}</echo>
		<echo>com.isimo.scenarios=${com.isimo.scenarios}</echo>
		<echo>isimo.model.path=${isimo.model.path}</echo>
		<echo>configdir=${configdir}</echo>
		<var unset="true" name="scenarioname"/>
		<propertyregex input="${scenario}" property="scenarioname" override="true" regexp="\/" replace="_" global="true" defaultValue="${scenario}"/>
		<echo>Starting scenario ${scenario}, report in the directory ${project.build.directory}/tests/${scenarioname}</echo>
		<mkdir dir="${project.build.directory}/tests/${scenarioname}"/>
		<genproperties input="${project.build.directory}/tests/input.properties" result="${project.build.directory}/tests/${scenarioname}/test.properties" mavenprops="${project.build.directory}/tests/maven.properties"/>
		<!-- run new test in a separate VM -->
		<!-- Can fork a separate process so that a System.exit() does not kill the Ant build -->
		<!-- Runs tests from the JUnit testing framework -->
		<if>
			<equals arg1="${isimo.cleanup}" arg2="true"/>
			<then>
				<antcall target="testframework_cleanup"/>
			</then>
		</if>

		<echo>isimo.nocommandline=${isimo.nocommandline}</echo>
		<echo>isimo.commandlineonerror=${isimo.commandlineonerror}</echo>
		<echo>isimo.model.path=${isimo.model.path}</echo>
		<echo>isimo.browser=${isimo.browser}</echo>
		<echo>isimo.waitforremotedebug=${isimo.waitforremotedebug}</echo>
		<echo>isimo.actiontimeout=${isimo.actiontimeout}</echo>
		<echo>browser=${browser}</echo>
		<exec command="taskkill">
			<arg line="/F /IM iexplore.exe /T" />
		</exec>
		<exec command="taskkill">
			<arg line="/F /FI &quot;IMAGENAME eq IEDriverServer*&quot; /T" />
		</exec>
		<exec command="taskkill">
			<arg line="/F /IM WerFault.exe /T" />
		</exec>
		<exec command="taskkill">
			<arg line="/F /FI &quot;IMAGENAME eq geckodriver*&quot; /T" />
		</exec>
		<var name="timeout" value="360000000" />
		<xmltask source="${com.isimo.scenarios}/${scenario}.xml">
			<copy path="/*[name()='scenario']/@timeout" property="tout"/>
		</xmltask>
		<if>
			<isset property="tout"/>
			<then>
				<var unset="true" name="timeout"/>
				<var name="timeout" value="${tout}"/>
			</then>
		</if>
		<echo>Timeout=${timeout}</echo>
		<if>
			<not>
				<isset property="isimo.waitforremotedebug"/>
			</not>
			<then>
				<property name="isimo.waitforremotedebug" value="n"/>
			</then>
		</if>
		<junit fork="true" printsummary="true" showoutput="true" dir="${project.build.directory}/tests/${scenarioname}" timeout="${timeout}">
			<jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=${isimo.waitforremotedebug},address=25005"/>
			<jvmarg value="-Dscenario=${scenario}"/>
			<jvmarg value="-Disimo.report.dir=${project.build.directory}/tests/${scenarioname}"/>
			<jvmarg value="-Dfile.encoding=UTF-8"/>
			<!--<jvmarg value="-Dcom.isimo.scenarios=${com.isimo.scenarios}"/>
			<jvmarg value="-Disimo.waitforremotedebug=${isimo.waitforremotedebug}"/>
			<jvmarg value="-Disimo.nocommandline=${isimo.nocommandline}"/>
			<jvmarg value="-Disimo.commandlineonerror=${isimo.commandlineonerror}"/>
			<jvmarg value="-Disimo.model.path=${isimo.model.path}"/>
			<jvmarg value="-Disimo.browser=${isimo.browser}"/>-->
			<classpath refid="project.classpath"/>
			<test name="com.isimo.core.TestCases" haltonerror="false" haltonfailure="false" todir="${project.build.directory}/tests/${scenarioname}" outfile="${scenarioname}_junit" methods="testScenario" fork="true">
				<formatter type="xml" usefile="yes"/>
				<formatter type="plain" usefile="yes"/>
			</test>
		</junit>
		<echo>Executed scenario ${scenario}, report in the directory ${project.build.directory}/tests/${scenarioname}</echo>
	</target>

	<target name="testManyScenarios">
		<!-- <antcall target="cleantasks"/> -->
		<!-- <antcall target="testScenario">
			<param name="scenario" value="01-ReklamationEinfach"/>
		</antcall>
		<antcall target="testScenario">
			<param name="scenario" value="02-ReklamationLeistungEdit"/>
		</antcall>
		<antcall target="testScenario">
			<param name="scenario" value="03-ReklamationLeistungenMassEdit"/>
		</antcall>-->
		<for param="file" parallel="${parallel}">
			<sort>
				<fileset refid="isimo.scenarios"/>
			</sort>
			<sequential>
				<var unset="true" name="sc"/>
				<var name="sc" value="@{file}"/>
				<propertyregex input="${sc}" override="true" property="scslash" regexp="\\" replace="\/" global="true">
				</propertyregex>
				<propertyregex input="${com.isimo.scenarios}" override="true" property="scbase" regexp="\\" replace="\/" global="true">
				</propertyregex>
				<propertyregex input="${scslash}" override="true" property="scenarioname" regexp="^${scbase}\/(.*)\.xml$" replace="\1" global="true">
				</propertyregex>
				<echo>Executing scenario ${scenarioname}</echo>
				<var name="scenario" value="${scenarioname}"/>
				<runtarget target="testScenario"/>
			</sequential>
		</for>
	</target>
	
	<target name="postprocess">
		<isimodependencyfilesets prefix="mavendeps."/>
		<delete dir="${project.build.directory}/isimoresources"/>
		<mkdir dir="${project.build.directory}/isimoresources"/>
		<echo>phase:postprocess</echo>
		<echo>Deps=${mavendeps.isimo.project.dependencies.property}</echo>
		<for param="dep"  delimiter="," list="${mavendeps.isimo.project.dependencies.property}">
			<sequential>
				<unzip dest="${project.build.directory}" src="@{dep}" overwrite="true">
					<patternset>
						<include name="isimoresources/**"/>
					</patternset>
				</unzip>
				<for param="buildxml">
					<fileset dir="${project.build.directory}/isimoresources">
						<include name="**/isimopostbuild.xml"/>
					</fileset>
					<sequential>
						<echo>Calling antfile @{buildxml}</echo>
						<ant antfile="@{buildxml}" inheritall="true" inheritrefs="true"/>
					</sequential>
				</for>
				<delete>
					<fileset dir="${project.build.directory}/isimoresources">
						<include name="**/isimopostbuild.xml"/>
					</fileset>
				</delete>				
			</sequential>
		</for>
	</target>

</project>